#!/usr/bin/env node

var fs = require('fs');
var jade = require('jade');
var natural = require('natural');

var trie = new natural.Trie(false);
var tokenizer = new natural.WordTokenizer();
trie.addStrings(require('./tags.json'));

var tagsMap = {};
var catalog = require('./catalog.json').sort(function(prev, next) {
  return new Date(next.date) - new Date(prev.date);
}).map(function(post) {
  var mytags = {};
  var html = post.html = fs.readFileSync(post.path, 'utf8');
  var tags = tokenizer.tokenize(html).filter(function(token) {
    token = token.toLowerCase();
    if (trie.contains(token) && !mytags[token]) {
      mytags[token] = true;
      return true;
    } else {
      return false;
    }
  });

  Object.keys(mytags).forEach(function(tag) {
    if (!tagsMap[tag])
      tagsMap[tag] = [post];
    else
      tagsMap[tag].push(post);
  })

  post.tags = tags;
  return post;
})

Object.keys(tagsMap).forEach(function(tag) {
  fs.writeFileSync('./tags/'+tag+'.html', jade.renderFile('./templates/home.jade', {
    'title': 'Under Tech - '+tag,
    'posts': tagsMap[tag]
  }));
})

var html = jade.renderFile('./templates/home.jade', {
  'title': 'Under Tech.',
  'posts': catalog
});
fs.writeFileSync('index.html', html);
